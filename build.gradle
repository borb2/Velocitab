import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'xyz.jpenilla.run-velocity' version '2.3.1'
    id 'com.gradleup.shadow' version '8.3.6'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'org.ajoberstar.grgit' version '5.3.0'
    id 'maven-publish'
    id 'java'
}

group 'net.william278'
version "$ext.plugin_version${versionMetadata()}"
description "$ext.plugin_description"
defaultTasks 'licenseFormat', 'build'

ext {
    set 'version', version.toString()
    set 'description', description.toString()

    set 'velocity_api_version', velocity_api_version.toString()
    set 'velocity_minimum_build', velocity_minimum_build.toString()
    set 'papi_proxy_bridge_minimum_version', papi_proxy_bridge_minimum_version.toString()
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.william278.net/velocity/' }
    maven { url = 'https://repo.william278.net/releases/' }
    maven { url = 'https://repo.william278.net/snapshots/' }
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://repo.minebench.de/' }
    maven { url = 'https://jitpack.io' }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:${velocity_api_version}-SNAPSHOT"
    compileOnly "com.velocitypowered:velocity-proxy:${velocity_api_version}-SNAPSHOT"
    compileOnly "net.william278:papiproxybridge:${papi_proxy_bridge_minimum_version}"

    compileOnly 'io.netty:netty-codec-http:4.2.2.Final'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    compileOnly 'net.luckperms:api:5.5'
    compileOnly 'io.github.miniplaceholders:miniplaceholders-api:2.2.3'
    compileOnly 'it.unimi.dsi:fastutil:8.5.15'
    compileOnly 'net.kyori:adventure-nbt:4.21.0'

    implementation 'org.apache.commons:commons-text:1.13.1'
    implementation 'net.william278:desertwell:2.0.4'
    implementation 'net.william278:minedown:1.8.2'
    implementation 'org.bstats:bstats-velocity:3.1.0'
    implementation 'de.exlll:configlib-yaml:4.6.1'
    implementation 'org.mvel:mvel2:2.5.2.Final'
    implementation 'net.jodah:expiringmap:0.5.11'
    implementation 'net.william278.toilet:toilet-velocity:1.0.12'

    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

processResources {
    def tokenMap = [:]
    rootProject.ext.properties.each { key, value ->
        if (value instanceof String) {
            tokenMap[key] = value
        } else {
            tokenMap[key] = value.toString()
        }
    }
    tokenMap['grgit'] = ''
    filesMatching(['**/*.json', '**/*.yml']) {
        filter ReplaceTokens as Class, beginToken: '${', endToken: '}',
                tokens: tokenMap
    }
}

license {
    header = rootProject.file('HEADER')
    include '**/*.java'
    newLine = true
}

logger.lifecycle("Building Velocitab ${version} by William278 & AlexDev03")
version rootProject.version
archivesBaseName = "${rootProject.name}"

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

java {
    def javaVersion = JavaVersion.toVersion(javaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    withSourcesJar()
    withJavadocJar()
}

shadowJar {
    // Exclude dependencies that should not be included
    exclude 'META-INF/maven/**'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    
    // Relocate packages to avoid conflicts
    relocate 'org.apache.commons.text', 'net.william278.velocitab.libraries.commons.text'
    relocate 'org.jetbrains', 'net.william278.velocitab.libraries'
    relocate 'org.intellij', 'net.william278.velocitab.libraries'
    relocate 'de.themoep', 'net.william278.velocitab.libraries'
    relocate 'net.william278.annotaml', 'net.william278.velocitab.libraries.annotaml'
    relocate 'net.william278.desertwell', 'net.william278.velocitab.libraries.desertwell'
    relocate 'net.william278.toilet', 'net.william278.velocitab.libraries.toilet'
    relocate 'org.bstats', 'net.william278.velocitab.libraries.bstats'
    relocate 'de.exlll.configlib', 'net.william278.velocitab.libraries.configlib'
    relocate 'org.snakeyaml', 'net.william278.velocitab.libraries.snakeyaml'
    relocate 'org.apache.commons.jexl3', 'net.william278.velocitab.libraries.commons.jexl3'
    relocate 'org.apache.commons.logging', 'net.william278.velocitab.libraries.commons.logging'
    relocate 'net.jodah.expiringmap', 'net.william278.velocitab.libraries.expiringmap'
    relocate 'org.mvel2', 'net.william278.velocitab.libraries.mvel2'

    // Output configuration
    destinationDirectory.set(file("$rootDir/target"))
    archiveClassifier.set('')
    archiveBaseName.set('velocitab')
    
    // Ensure all implementation dependencies are included
    configurations = [project.configurations.runtimeClasspath]
    
    // Don't minimize to ensure all dependencies are included
    minimize {
        exclude(dependency('org.apache.commons:.*'))
        exclude(dependency('net.william278:.*'))
        exclude(dependency('de.exlll:.*'))
        exclude(dependency('org.mvel:.*'))
        exclude(dependency('net.jodah:.*'))
        exclude(dependency('org.bstats:.*'))
    }
}
// Make build depend on shadowJar instead of regular jar
jar.dependsOn shadowJar
build.dependsOn shadowJar
clean.delete "$rootDir/target"

// Add a task to build only the shadowJar
task buildShadowJar(type: DefaultTask) {
    description = 'Builds the shadow JAR with all dependencies included'
    group = 'build'
    dependsOn shadowJar
    doLast {
        println "ShadowJar built successfully!"
        def jarFile = file("$rootDir/target/velocitab-${version}.jar")
        if (jarFile.exists()) {
            println "JAR location: ${jarFile.absolutePath}"
            println "JAR size: ${jarFile.length() / 1024 / 1024} MB"
        } else {
            println "Warning: JAR file not found at expected location"
        }
    }
}

publishing {
    repositories {
        if (System.getenv("RELEASES_MAVEN_USERNAME") != null) {
            maven {
                name = "william278-releases"
                url = "https://repo.william278.net/releases"
                credentials {
                    username = System.getenv("RELEASES_MAVEN_USERNAME")
                    password = System.getenv("RELEASES_MAVEN_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
        if (System.getenv("SNAPSHOTS_MAVEN_USERNAME") != null) {
            maven {
                name = "william278-snapshots"
                url = "https://repo.william278.net/snapshots"
                credentials {
                    username = System.getenv("SNAPSHOTS_MAVEN_USERNAME")
                    password = System.getenv("SNAPSHOTS_MAVEN_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'net.william278'
            artifactId = 'velocitab'
            version = "$rootProject.version"
            artifact shadowJar
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

tasks {
    var papi = papi_proxy_bridge_minimum_version
    runVelocity {
        velocityVersion("${velocity_api_version}-SNAPSHOT")

        downloadPlugins {
//            github ("WiIIiam278", "PAPIProxyBridge", "1.7.1", "PAPIProxyBridge-Velocity-1.7.1.jar")
            modrinth ("miniplaceholders", "2.2.4")
        }
    }
}

@SuppressWarnings('GrMethodMayBeStatic')
def versionMetadata() {
    // Require grgit
    if (grgit == null) {
        return '-unknown'
    }

    // If unclean, return the last commit hash with -indev
    if (!grgit.status().clean) {
        return '-' + grgit.head().abbreviatedId  + '-indev'
    }

    // Otherwise if this matches a tag, return nothing
    def tag = grgit.tag.list().find { it.commit.id == grgit.head().id }
    if (tag != null) {
        return ''
    }
    return '-' + grgit.head().abbreviatedId
}